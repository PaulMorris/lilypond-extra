\input texinfo

@node Top
@top Grand Organization Project - Policy Proposals (GOP-PROP)
@settitle LilyPond GOP-PROP 

@macro late{TEXT}
@cartouche
@strong{Addition after "probable decision":} \TEXT\

@end cartouche

@end macro

@macro qq{TEXT}
@quotedblleft{}\TEXT\@quotedblright{}
@end macro



There are a number of policy decisions -- some of them fairly
important -- which we have been postponing for a few years.  Now
that 2.14 is out, we will finally begin tackling them.

More background is here:
@uref{http://lilypond.org/doc/v2.15/Documentation/contributor/policy-decisions}

@subheading Meta-policies

To summarize and/or hopefully avoid useless fluffy discussions:

@itemize
@item
Topics will be introduced by Graham.  He will put an agenda for
the next month (or so) on @uref{http://lilypond.org/~graham/gop/}

@item
We will @strong{only} seriously discuss topics when we have
adequate background research.

@item
Emails about policy questions will begin with @code{GOP-PROP} in
the subject line.  Adjust your email filters accordingly,
depending on whether you are interested or not in such
discussions.

@item
There should be no surprises, no time pressure, etc.  If you are
particularly concerned about a decision but lack time/energy to
join the discussion, just say so and we will postponed the
decision.  I want to have clear, final, unambiguous decisions; if
that takes a long time, so be it.

@item
For each policy question, there will be at least @strong{one week}
for free-ranging discussion.  At that point, Graham will summarize
the discussion and announce a "probable decision".  We will then
have @strong{one more week} to let people point out flaws in the
summary, make additional arguments, etc.

@end itemize


@subheading Agenda

@multitable @columnfractions .05 .2 .2 .2
@headitem Date
  @tab Introduce policy question (-1d)
  @tab Summary and @qq{probable decision} (0d)
  @tab Implement decision (+1d)

@item
2012-06-13
@tab
@ref{GOP2-0 - why are we losing developers?}
@tab @tab

@item
2012-06-20
@tab
@ref{GOP2-1 - LilyPond is part of GNU}
@tab
@tab

@item
2012-06-27
@tab
@ref{GOP2-2 - Stable releases and roadmap (radical change)}
@tab
@ref{GOP2-0 - why are we losing developers?}
@tab

@item
2012-07-04
@tab
@tab
@ref{GOP2-1 - LilyPond is part of GNU}
@tab

@item
2012-07-11
@tab
@ref{GOP2-3 - Patch handling}
@tab
@ref{GOP2-2 - Stable releases and roadmap (radical change)}
@tab
@ref{GOP2-1 - LilyPond is part of GNU}

@item
2012-07-18
@tab
@tab
@ref{GOP2-3 - Patch handling}
@tab
@ref{GOP2-2 - Stable releases and roadmap (radical change)}

@item
2012-07-25
@tab
@tab
@tab
@ref{GOP2-3 - Patch handling}

@item
2012-08-01
@tab
@tab
@tab


@end multitable


@menu
* GOP2-0 - why are we losing developers?::
* GOP2-1 - LilyPond is part of GNU::
* GOP2-2 - Stable releases and roadmap (radical change)::
* GOP2-3 - Patch handling::
@end menu


@node GOP2-0 - why are we losing developers?
@chapter GOP2-0 - why are we losing developers?


@subheading Summary

We're not in terrible shape, but we're not in good shape either.


@subheading Detailed responses

Survey sent:

@example
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00192.html}
@end example

There were 11 responses:

@example
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00346.html,devA}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00347.html,devB}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00348.html,devC}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00349.html,devD}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00350.html,devE}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00351.html,devF}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00352.html,devG}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00353.html,devH}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00354.html,devJ}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00355.html,devK}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00384.html,devL}
@end example

@heading Summarize of those emails

Here is a rough summary of the 11 responses.  4 developers (devA,
devE, devJ, devK) did not report any @qq{problematic} reasons.  Of
the remaining 7 developers, the reported problems are:

@multitable @columnfractions .33 .33

@item
Patch-handling (git branch, countdown, staging, etc)
@tab
devB, devC, devF, devH, devL,

@item
Mailing lists arguments
@tab
devB, devC, devG,

@item
maintenance procrastination; things not getting done
@tab
devC, devH,

@item
lack of people with specific responsibilities (particularly
mentors)
@tab
devC, devD,

@item
lack continuous integration environment and really automated testing
@tab
devB

@item
no feeling of @qq{teamwork}
@tab
devC,

@item
too long / too much effort to produce stable releases
@tab
devC,

@item
number of open issues (overwhelming, demoralizing)
@tab
devC,

@item
difficult to contribute with windows and a slow computer (lilydev
is not suitable)
@tab
devG

@item
feeling that other people could complete a task much quicker
@tab
devH,

@item
time spent reading+writing emails
@tab
devH,

@item
Reviews (lack of quantity, to much nitpicking of words)
@tab
devH, 

@item
lack of overall vision or roadmap
@tab
devH,

@end multitable


@subheading Initial thoughts about the response

Obvious @qq{policy} problems to discuss in the coming weeks: patch
handling, stable releases, roadmap, better testing.

Mailing list arguments are a trickier issue.  It's clearly a big
problem, but this isn't something we can fix by waving a change of
policy.  I'll schedule a time to discuss it.  We need to do
something about this, although at the moment I have no immediate
suggestions.

Lack of people with responsibilities, mentors, lack of reviews,
type of reviews, things not getting done, number of open issues: I
don't see many @qq{policy} that can help with this (other than
generally encouraging people to spend more time and/or eliminating
things which drive people away).  It's certainly to note that
these are problems, though.  The best I can think of is to clarify
who is currently responsible for what, and make the vacancies more
apparent.  Again, I'll schedule a time to discuss these.

There are a few problems that I can't see any real @qq{project}
solution to: difficult to contribute with windows, feeling that
other people could finish tasks faster, time spent reading+writing
email.  I suggest that we simply acknowledge that those are
problems, but focus discussion on other issues.


@node GOP2-1 - LilyPond is part of GNU
@chapter GOP2-1 - LilyPond is part of GNU

@heading Summary

LilyPond has been a member of the GNU project for longer than I've
been involved (2001), but there's a few policies for which we
aren't in full compliance.  We should remedy this.

@heading Not optional

Some of these policies may raise questions from LilyPond
developers, but I'd like to eliminate certain questions or
debating positions right off the bat.  LilyPond is GNU software.
Meeting the requirements of GNU software is not optional (at
least, it @emph{should not} be optional).  I realize that we
haven't always done this, so I'm suggesting that we should only
enforce these after 2.16 is out.  But they definitely
@emph{should} be enforced.  We've benefitted from GNU hosting,
mailing lists, publicity, and GSoC umbrella organization-ness.

I am very option to suggestions that I (or Mike, who helped me
with this) misread or mis-summarized their policy document, or
suggestions that we can meet the obligations in other means.  But
I think we should start from the basis of @qq{is this an accurate
reflection of their policy document?} and @qq{what is the best way
to follow these requirements?}, not @qq{do we want to bother?}.

@example
@uref{http://www.gnu.org/prep/maintain/maintain.html}
@end example

In case somebody has the most extreme disagreement with GNU
policies, I will clarify that LilyPond is published under the
GPLv3 (and FDL 1.3+), which gives you the freedom to fork the
source code and run a separate project not affiliated with GNU,
provided that you abide by the copyright licenses.  Nothing in
this list impinges on your Freedom to do so -- in fact, one of the
underlying themes of these policies is to maximize people's
ability to do so.


I've separated the policies into project Requirements, project
Recommended, and maintainer Requirements.


@heading Project Requirements

@multitable @columnfractions .33 .1 .33

@headitem Requirement
  @tab Source
  @tab questions and implications for LilyPond

@item
All authors of more than 15 lines of code need to be listed
somewhere.
@tab
6.3
@tab
can we cover this requirement by pointing people at the git
history?  (answer: maybe for full source, but not for tarball)
@sp 1
Hopefully we can automate this process to some degree with git?

@item
Must have a copyright notice for all files longer than 10 lines,
including documentation, supporting files, images and sound files
(if the metadata allows this, or in a README or similarly-named
file in the same directory if not).  Using a minimal form (such as
in Emacs and Elisp manuals) is ok.  @qq{Recursive} permissions
(i.e.  @qq{everything in this directory tree} are not ok.
@sp 1
Copy ranges are only acceptable if every year is really a
@qq{copyrightable} year and if the README file details this usage.
Must use the @qq{or any later version} license.
@sp 1
Copyright headers for each file do not need to include everybody
who edited the file, only the main copyright holder(s).
@tab
6.5
@tab
This will take at least 10 hours to implement.

@item
All features must work on GNU/Linux; other operating systems are
optional
@tab
8
@tab
nothing stops us from also requiring features to work on other
operating systems, so Windows and OSX users don't need to panic.


@item
keep backups of source files, but git is sufficient for this
@tab
10
@tab


@item
on self-hosted websites, ensure that the site runs on Free
software alone.  (unreleased custom software is ok)
@tab
12.2
@tab
AFAIK lilypond.org is ok


@item
don't link to a website about lilypond, which the public
might perceive as connected with it and reflecting the position of
its developers, unless it also runs on free software.
(unreleased custom software is ok)
@tab
12.2
@tab


@item
avoid patented technologies as specified by GNU.  For example,
mp3.
@tab
13
@tab
There is no definitive list of such patent-crippled things, rather
this is a general reminder to avoid things which are known to be
crippled.

@item
do not recommend any non-Free programs, nor require a non-free
program to build
@tab
13
@tab
I'd better check the licenses of the @qq{Easier editing} programs.

@item
do not refer to any non-Free documentation for Free software
@tab
13
@tab
I think we're fine here

@item
do not use the term @qq{open source}, instead of @qq{Free
software}
@tab
14.1
@tab
German website main page not in compliance.

@item
do not write @qq{Linux}, instead write @qq{GNU/Linux} (unless we
are specifically talking about the kernel)
@tab
14.2
@tab
the download pages on the website need to be fixed.

@end multitable


@heading Project Recommended

@multitable @columnfractions .33 .1 .33

@headitem Requirement
  @tab Source
  @tab notes and questions

@item
assign copyright to FSF (this adds a bunch of obligations not
listed in this document)
@tab
6.1
@tab
we're not going to do this.

@item
Thank everybody who reports a bug, but no requirement to help
users directly instead of improving code
@tab
9.3
@tab
I think the Bug Squad already does this, but maybe add it to the
Bug Squad checklist?  :)
@sp 1
Also, remind the two grumpy developers that they shouldn't reply
to bug reports unless they feel amazingly un-grumpy that day.

@item
use ftp.gnu.org for official source releases
@tab
11.3
@tab
would require 10 hours of work; not worth it IMO

@item
announce stable releases on info-gnu@
@tab
11.6
@tab
do-able if somebody makes a list of places to announce new stable
releases.
@uref{http://code.google.com/p/lilypond/issues/detail?id=1719}

@item
post release announcements on the savannah project site
@tab
@tab
would take 5-10 hours to set up

@item
web pages should include manuals in
HTML, DVI, Info, PostScript,
PDF, plain ASCII, and Texinfo format (source)
@tab
12.3
@tab
Ouch.  dvi, postscript, and plain ASCII?

@item
make a diff between releases
@tab
11.2
@tab
let's not bother; interested parties can make a diff themselves
from git.

@item
manuals should be listed at @uref{http://www.gnu.org/manual} as
well as our own website
@tab
12.3
@tab
points to old website docs; I need to find out how to update this
link.

@item
if feasible, use Guile for extensions, although @qq{For some
programs there's a reason to do things differently, but please use
GUILE if that is feasible.}
@tab
(email to new maintainers, not in the guide yet)
@tab


@end multitable



@heading Maintainer required

These apply to the GNU maintainer(s) personally, not for normal
project members.

Role of GNU maintainer (section 5):

@quotation
... you cannot expect all contributors to support the GNU Project,
or to have a concern for its policies and standards. So part of
your job as maintainer is to exercise your authority on these
points when they arise. No matter how much of the work other
people do, you are in charge of what goes in the release. When a
crucial point arises, you should calmly state your decision and
stick to it.
@end quotation


@multitable @columnfractions .33 .1 .33

@headitem Requirement
  @tab Source
  @tab notes and questions

@item
get an account on fencepost.gnu.org
@tab
3
@tab

@item
inform GNU when stepping down
@tab
4
@tab

@item
if using savannah, subscribe to savannah-announce mailing list
@tab
10
@tab

@item
in interviews and speeches in your role as GNU maintainer, don't
include advertisements for any company, product, or service.
(previous rules about @qq{open source} still apply)
@tab
15
@tab

@end multitable




@node GOP2-2 - Stable releases and roadmap (radical change)
@chapter GOP2-2 - Stable releases and roadmap (radical change)

@subheading Summary

Let's drop the @qq{any unintended change} thing, and go totally
with the regression tests.  Tests pass?  We can make a stable
release.  Also, let's have an official roadmap.


@subheading Motivation

There seems to be widespread frustration with the current system.
At the moment, any @qq{unintended change} blocks a release (plus a
few extra conditions), so we're at the mercy of all sorts of
behaviour that isn't covered by the regtests.  This makes it hard
to plan ahead for everybody: developers wanting to work on large
features or refactoring, users, linux distribution packagers, etc.

@subheading Details: Critical issues

A type-Critical issue will block a stable release, but the
definition is:

@itemize
@item
a reproducible failure to build either @code{make} or @code{make
doc}, from an empty build tree, in a first run, if
@code{configure} does not report any errors.

@item
anything which stops contributors from helping out (e.g.
lily-git.tcl not working, source tree(s) not being available,
LilyDev being unable to compile git master, inaccurate
instructions in the Contributor’s Guide 2 Quick start).

@quotation
To limit this scope of this point, we will assume that the
contributor is using the latest LilyDev and has read the relevant
part(s) of the Contributor’s Guide. Problems in other chapters of
the CG are not sufficient to qualify as Type-Critical. 
@end quotation

@item
any regression test which fails to compile or shows incorrect
output.

@end itemize

The only change is to the third point, namely the @qq{regression
test failure} as opposed to @qq{any unintentional change}.

@subheading Details: Regtests

The current regtests don't cover enough -- that's why we keep on
finding new regression-Critical issues.  I think it's worth
expanding the regtests and splitting them into multiple
categories.

These names don't (deliberately) match any specific testing
methodology.  If they do, then it's probably a mistake and we
should rename these.

@itemize
@item
Crash: we don't care about the output of these; we just want to
make sure that lilypond doesn't crash with this input.

@item
Tiny: these files would test individual features, such as printing
accidentals or slurs, with a minimum of shared features.

@item
Integration: these are constructed examples which combine multiple
features together.

@item
Pieces: musically-interesting fragments of music, such as a few
systems from a Bach sonata or Debussy piano work.

@item
Syntax: short fragments of music for which the @code{.ly} files
are @qq{frozen} -- we @strong{never} run @code{convert-ly} on
these files until LilyPond 4.0.  (see below, @qq{roadmap})

@end itemize

I figure that we'll double the total number of regtests.  There's
probably some old ones that can be eliminated (or combined with
newer ones), but we'll be adding a lot more.


@subheading Programming regtests

To avoid slowing down programming to a crawl, I figure that we'll
identify some subset of these regtests and have a separate
@command{make regtests-quick} command which only evaluates that
subset.

As a rule of thumb, I'd say that the @code{regtests-quick} target
should take as long as a @code{make} from scratch.  I'm
sympathetic to developers with limited computing resources, but I
think it's reasonable to ask everybody submitting programming
patches to @qq{double} the time it takes to test their patch
(since obviously everybody would run @code{make} before submitting
anything).

The patchy test-patches will still run the full regtest checks.

@subheading When breakage occurs

There will of course be functionality which breaks.  When that
happens, we file a normal bug.  A new regtest can only be added
for that bug when it is fixed -- we won't add the regtest first,
then try to fix it.

In other words, git master should always pass all regtests.  If it
doesn't, then reverting should be the first option.


@subheading Roadmap

With this change, we would no longer be committed to the same kind
of stability that we were before.  As such, I think it's worth
bumping the version up to 3.0.

The 3.x series will consist of a series of random breakage from
functionality not covered under the existing regtests and from
manual @code{.ly} changes required by GLISS.  This is intentional
-- or rather, we don't intend to break stuff, but the policy
accepts that this will happen.  Somebody may offer to maintain the
2.x series to cater to users who want additional stability.

Over the next 3 months or so, we'll discuss a number of syntax
changes in GLISS.  Then discussion will cease until all the
changes have been implemented.  We'll then have release 3.2, which
will almost certainly require manual changes to all .ly files.

We'll then have another few months of GLISS discussions, then a
pause for implementions, then 3.4.  Repeat as necessary.

LilyPond 4.0 will mark the ending of GLISS, and by that point we
should have much improved regtest coverage.  We can't really plan
too much for this, since it's likely two years away.


@node GOP2-3 - Patch handling
@chapter GOP2-3 - Patch handling


@bye

