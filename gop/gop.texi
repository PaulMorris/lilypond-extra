\input texinfo

@node Top
@top Grand Organization Project - Policy Proposals (GOP-PROP)
@settitle LilyPond GOP-PROP 

@macro late{TEXT}
@cartouche
@strong{Addition after "probable decision":} \TEXT\

@end cartouche

@end macro

@macro qq{TEXT}
@quotedblleft{}\TEXT\@quotedblright{}
@end macro



There are a number of policy decisions -- some of them fairly
important -- which we have been postponing for a few years.  Now
that 2.14 is out, we will finally begin tackling them.

More background is here:
@uref{http://lilypond.org/doc/v2.15/Documentation/contributor/policy-decisions}

@subheading Meta-policies

To summarize and/or hopefully avoid useless fluffy discussions:

@itemize
@item
Topics will be introduced by Graham.  He will put an agenda for
the next month (or so) on @uref{http://lilypond.org/~graham/gop/}

@item
We will @strong{only} seriously discuss topics when we have
adequate background research.

@item
Emails about policy questions will begin with @code{GOP-PROP} in
the subject line.  Adjust your email filters accordingly,
depending on whether you are interested or not in such
discussions.

@item
There should be no surprises, no time pressure, etc.  If you are
particularly concerned about a decision but lack time/energy to
join the discussion, just say so and we will postponed the
decision.  I want to have clear, final, unambiguous decisions; if
that takes a long time, so be it.

@item
For each policy question, there will be at least @strong{one week}
for free-ranging discussion.  At that point, Graham will summarize
the discussion and announce a "probable decision".  We will then
have @strong{one more week} to let people point out flaws in the
summary, make additional arguments, etc.

@end itemize


@subheading Agenda

@multitable @columnfractions .05 .2 .2 .2
@headitem Date
  @tab Introduce policy question (-1d)
  @tab Summary and @qq{probable decision} (0d)
  @tab Implement decision (+1d)

@item
2012-06-13
@tab
@ref{GOP2-0 - why are we losing developers?}
@tab @tab

@item
2012-06-20
@tab
@ref{GOP2-1 - LilyPond is part of GNU}
@tab
@tab

@item
2012-06-27
@tab
@tab
@ref{GOP2-0 - why are we losing developers?}
@tab

@item
2012-07-04
@tab
@tab
@tab

@item
2012-07-11
@tab
@tab
@tab

@item
2012-07-18
@tab
@ref{GOP2-2b - Stable 2.16.x releases (dictator)}
@tab
@ref{GOP2-1 - LilyPond is part of GNU}
@tab

@item
2012-07-25
@tab
@ref{GOP2-3 - GLISS or not}
@tab
@ref{GOP2-2b - Stable 2.16.x releases (dictator)}
@tab
@ref{GOP2-1 - LilyPond is part of GNU}

@item
2012-08-01
@tab
@tab
@ref{GOP2-3 - GLISS or not}
@tab
@ref{GOP2-2b - Stable 2.16.x releases (dictator)}


@item
2012-08-08
@tab
@ref{GOP2-4 - Patch handling}
@tab
@tab
@ref{GOP2-3 - GLISS or not}


@item
2012-08-15
@tab
@tab
@tab
@ref{GOP2-3 - GLISS or not}


@item
2012-08-22
@tab
@tab
@tab


@item
2012-08-29
@tab
@tab
@tab


@end multitable


@menu
* GOP2-0 - why are we losing developers?::
* GOP2-1 - LilyPond is part of GNU::
* GOP2-2b - Stable 2.16.x releases (dictator)::
* GOP2-3 - GLISS or not::
* GOP2-4 - Patch handling::
* GOP2-5 - Arguments and civility::
@end menu


@node GOP2-0 - why are we losing developers?
@chapter GOP2-0 - why are we losing developers?


@subheading Summary

We're not in terrible shape, but we're not in good shape either.


@subheading Detailed responses

Survey sent:

@example
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00192.html}
@end example

There were 11 responses:

@example
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00346.html,devA}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00347.html,devB}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00348.html,devC}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00349.html,devD}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00350.html,devE}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00351.html,devF}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00352.html,devG}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00353.html,devH}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00354.html,devJ}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00355.html,devK}
@uref{http://lists.gnu.org/archive/html/lilypond-devel/2012-06/msg00384.html,devL}
@end example

@heading Summarize of those emails

Here is a rough summary of the 11 responses.  4 developers (devA,
devE, devJ, devK) did not report any @qq{problematic} reasons.  Of
the remaining 7 developers, the reported problems are:

@multitable @columnfractions .33 .33

@item
Patch-handling (git branch, countdown, staging, etc)
@tab
devB, devC, devF, devH, devL,

@item
Mailing lists arguments
@tab
devB, devC, devG,

@item
maintenance procrastination; things not getting done
@tab
devC, devH,

@item
lack of people with specific responsibilities (particularly
mentors)
@tab
devC, devD,

@item
lack continuous integration environment and really automated testing
@tab
devB

@item
no feeling of @qq{teamwork}
@tab
devC,

@item
too long / too much effort to produce stable releases
@tab
devC,

@item
number of open issues (overwhelming, demoralizing)
@tab
devC,

@item
difficult to contribute with windows and a slow computer (lilydev
is not suitable)
@tab
devG

@item
feeling that other people could complete a task much quicker
@tab
devH,

@item
time spent reading+writing emails
@tab
devH,

@item
Reviews (lack of quantity, to much nitpicking of words)
@tab
devH, 

@item
lack of overall vision or roadmap
@tab
devH,

@end multitable


@subheading Initial thoughts about the response

Obvious @qq{policy} problems to discuss in the coming weeks: patch
handling, stable releases, roadmap, better testing.

Mailing list arguments are a trickier issue.  It's clearly a big
problem, but this isn't something we can fix by waving a change of
policy.  I'll schedule a time to discuss it.  We need to do
something about this, although at the moment I have no immediate
suggestions.

Lack of people with responsibilities, mentors, lack of reviews,
type of reviews, things not getting done, number of open issues: I
don't see many @qq{policy} that can help with this (other than
generally encouraging people to spend more time and/or eliminating
things which drive people away).  It's certainly to note that
these are problems, though.  The best I can think of is to clarify
who is currently responsible for what, and make the vacancies more
apparent.  Again, I'll schedule a time to discuss these.

There are a few problems that I can't see any real @qq{project}
solution to: difficult to contribute with windows, feeling that
other people could finish tasks faster, time spent reading+writing
email.  I suggest that we simply acknowledge that those are
problems, but focus discussion on other issues.


@node GOP2-1 - LilyPond is part of GNU
@chapter GOP2-1 - LilyPond is part of GNU

@heading Summary

LilyPond has been a member of the GNU project for longer than I've
been involved (2001), but there's a few policies for which we
aren't in full compliance.  We should remedy this.

@heading Not optional

Some of these policies may raise questions from LilyPond
developers, but I'd like to eliminate certain questions or
debating positions right off the bat.  LilyPond is GNU software.
Meeting the requirements of GNU software is not optional (at
least, it @emph{should not} be optional).  I realize that we
haven't always done this, so I'm suggesting that we should only
enforce these after 2.16 is out.  But they definitely
@emph{should} be enforced.  We've benefitted from GNU hosting,
mailing lists, publicity, and GSoC umbrella organization-ness.

I am very option to suggestions that I (or Mike, who helped me
with this) misread or mis-summarized their policy document, or
suggestions that we can meet the obligations in other means.  But
I think we should start from the basis of @qq{is this an accurate
reflection of their policy document?} and @qq{what is the best way
to follow these requirements?}, not @qq{do we want to bother?}.

@example
@uref{http://www.gnu.org/prep/maintain/}
@uref{http://www.gnu.org/prep/standards/}
@end example

In case somebody has the most extreme disagreement with GNU
policies, I will clarify that LilyPond is published under the
GPLv3 (and FDL 1.3+), which gives you the freedom to fork the
source code and run a separate project not affiliated with GNU,
provided that you abide by the copyright licenses.  Nothing in
this list impinges on your Freedom to do so -- in fact, one of the
underlying themes of these policies is to maximize people's
ability to do so.


I've separated the policies into project Requirements, project
Recommended, and maintainer Requirements.


@heading Project Requirements

@multitable @columnfractions .33 .1 .33 .2

@headitem Requirement
  @tab Source
  @tab questions and comments
  @tab Work required?

@item
All authors of more than 15 lines of code need to be listed
somewhere.
@tab
6.3
@tab
can we cover this requirement by pointing people at the git
history?  (answer: maybe for full source, but not for tarball)
@sp 1
It is acceptable to auto-generate this for the tarball; emacs uses
a small elisp function to generate AUTHORS based on the Changelog.
@code{git shortlog} or @code{git log --all --format='%aN' | sort
-u} looks like a good starting point.
@tab
Yes, auto-generate this for tarball

@item
Must have a copyright notice for all files longer than 10 lines,
including documentation, supporting files, images and sound files
(if the metadata allows this, or in a README or similarly-named
file in the same directory if not).
@tab
6.5
@tab
@sp 1
Using a minimal form (such as in Emacs and Elisp manuals) is ok:
@verbatim
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1994, 1999, 2001-2012 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@end verbatim

@sp 1
@qq{Recursive} permissions (i.e.  @qq{everything in this directory
tree} are not ok.
@sp 1
Copy ranges are only acceptable if every year is really a
@qq{copyrightable} year and if the README file details this usage.
Must use the @qq{or any later version} license.
@sp 1
Copyright headers for each file do not need to include everybody
who edited the file, only the main copyright holder(s).
@tab
Yes, at least 10 hours.

@item
All features must work on GNU/Linux; other operating systems are
optional
@tab
8
@tab
nothing stops us from also requiring features to work on other
operating systems, so Windows and OSX users don't need to panic.
@tab
no


@item
keep backups of source files, but git is sufficient for this
@tab
10
@tab
@tab
no


@item
on self-hosted websites, ensure that the site runs on Free
software alone.  (unreleased custom software is ok)
@tab
12.2
@tab
AFAIK lilypond.org is ok
@tab
no


@item
don't link to a website about lilypond, which the public
might perceive as connected with it and reflecting the position of
its developers, unless it also runs on free software.
(unreleased custom software is ok)
@tab
12.2
@tab
@tab
no


@item
avoid patented technologies as specified by GNU.  For example,
mp3.
@tab
13
@tab
There is no definitive list of such patent-crippled things, rather
this is a general reminder to avoid things which are known to be
crippled.
@tab
no

@item
do not recommend any non-Free programs, nor require a non-free
program to build.
Do not grant legitimacy to non-free programs by discussing them.
@tab
13, coding standards 8
@tab
I'd better check the licenses of the @qq{Easier editing} programs.
More context.

@qq{A GNU program should not recommend, promote, or grant
legitimacy to the use of any non-free program. Proprietary
software is a social and ethical problem, and our aim is to put an
end to that problem...}

@qq{When a non-free program or system is well known, you can
mention it in passing... However, you should give only the
necessary information to help those who already use the non-free
program to use your program with it -— don’t give, or refer to,
any further information about the proprietary program, and don’t
imply that the proprietary program enhances your program, or that
its existence is in any way a good thing.}

@qq{If a non-free program or system is obscure in your program’s
domain, your program should not mention or support it at all...}

FIXME: I'm currently checking if this applies to @qq{web
software}.
@tab
maybe

@item
do not refer to any non-Free documentation for Free software
@tab
13, coding standards 8
@tab
I think we're fine here.

Exception to the rule: @qq{...So GNU packages should never
recommend non-free documentation.  By contrast, it is ok to refer
to journal articles and textbooks in the comments of a program for
explanation of how it functions, even though they are non-free.}
@tab
no


@item
do not use the term @qq{open source}, instead of @qq{Free
software}
@tab
14.1
@tab
German website main page not in compliance.
@tab
yes

@item
do not write @qq{Linux}, instead write @qq{GNU/Linux} (unless we
are specifically talking about the kernel)
@tab
14.2
@tab
the download pages on the website need to be fixed.
@tab
yes

@item
Do not refer to proprietary programs
@tab
coding standards 2.1
@tab
This seems aimed at the algorithms and implementations of
proprietary programs.
@tab
no

@item
Do not include any trademark acknowledgements.
@tab
coding standards 2.3
@tab
@qq{What is legally required, as regards other people’s
trademarks, is to avoid using them in ways which a reader might
reasonably understand as naming or labeling our own programs or
activities.}
@tab
no

@item
Do not use trigraphs in C code.
@tab
coding standard 3.4
@tab
:-)
@tab
no

@end multitable


@heading Project Recommended

@multitable @columnfractions .33 .1 .33 .2

@headitem Requirement
  @tab Source
  @tab notes and questions
  @tab Work required?

@item
assign copyright to FSF (this adds a bunch of obligations not
listed in this document)
@tab
6.1
@tab
we're not going to do this.
@tab
no

@item
Thank everybody who reports a bug, but no requirement to help
users directly instead of improving code
@tab
9.3
@tab
I think the Bug Squad already does this, but maybe add it to the
Bug Squad checklist?  :)
@sp 1
Also, remind the two grumpy developers that they shouldn't reply
to bug reports unless they feel amazingly un-grumpy that day.
@tab
maybe

@item
use ftp.gnu.org for official source releases
@tab
11.3
@tab
would require 10 hours of work; not worth it IMO
@tab
no

@item
announce stable releases on info-gnu@
@tab
11.6
@tab
do-able if somebody makes a list of places to announce new stable
releases.
@uref{http://code.google.com/p/lilypond/issues/detail?id=1719}
@tab
yes

@item
post release announcements on the savannah project site
@tab
@tab
would take 5-10 hours to set up
@tab
no

@item
web pages should include manuals in
HTML, DVI, Info, PostScript,
PDF, plain ASCII, and Texinfo format (source)
@tab
12.3
@tab
Ouch.  dvi, postscript, and plain ASCII?
@tab
no

@item
make a diff between releases
@tab
11.2
@tab
let's not bother; interested parties can make a diff themselves
from git.
@tab
no

@item
manuals should be listed at @uref{http://www.gnu.org/manual} as
well as our own website
@tab
12.3
@tab
@tab
no

@item
if feasible, use Guile for extensions, although @qq{For some
programs there's a reason to do things differently, but please use
GUILE if that is feasible.}
@tab
coding standards 3.1
@tab
@tab
no


@end multitable



@heading Maintainer required

These apply to the GNU maintainer(s) personally, not for normal
project members.

Role of GNU maintainer (section 5):

@quotation
... you cannot expect all contributors to support the GNU Project,
or to have a concern for its policies and standards. So part of
your job as maintainer is to exercise your authority on these
points when they arise. No matter how much of the work other
people do, you are in charge of what goes in the release. When a
crucial point arises, you should calmly state your decision and
stick to it.
@end quotation


@multitable @columnfractions .33 .1 .33

@headitem Requirement
  @tab Source
  @tab notes and questions

@item
get an account on fencepost.gnu.org
@tab
3
@tab

@item
inform GNU when stepping down
@tab
4
@tab

@item
if using savannah, subscribe to savannah-announce mailing list
@tab
10
@tab

@item
in interviews and speeches in your role as GNU maintainer, don't
include advertisements for any company, product, or service.
(previous rules about @qq{open source} still apply)
@tab
15
@tab

@end multitable



@node GOP2-2b - Stable 2.16.x releases (dictator)
@chapter GOP2-2b - Stable 2.16.x releases (dictator)

@subheading Summary

Let's appoint David Kastrup as the @qq{benevolent dictator} of the
@code{stable/2.16} git branch.


@subheading Motivation

(mostly copied from an email by David)

Releasing a stable release brings progress to LilyPond users.
LilyPond users are the most promising clientele for recruiting
future developers.  People start actively working with the
versions they actually know and use.  The less connections remain
between the versions in the hand of the users and the current
development source, the less likely their own work is suitable for
eventual inclusion in LilyPond.  So we want to avoid having stable
versions that are quite outdated.

Regressions and bugs are a bad thing: we want to avoid them.
Detecting regressions and bugs is a good thing: we don't want to
create incentives to avoid detecting them.  What makes detecting
bugs a good thing?  We gain the opportunity to fix them, and we
gain knowledge, the opportunity to evaluate their severity.

A stable release with severe bugs is a problem.  A stable release
with some bugs and regressions is pretty much unavoidable.  Let's
accept that and leave it up to a human to judge whether bugs are
are @qq{severe} or not.


@subheading Regressions

(mostly copied from an email by Trevor)

So far there have been c. 75 critical regressions under the
current definition of 'critical' since 2.14.  All but one have
been fixed, many of them promptly.  This prompt attention IMO is
due only to the fact that they were deemed to block a stable
release.  If the only criterion is that the release compiles the
(extended) regtests satisfactorily, then I doubt that adequate
attention will be directed to bugs discovered after the release
that would be deemed critical on the current definition.  That
would seriously degrade the quality of our stable releases.

To complete the discussion David and I were having about the
possibility of using revert as an option to fix a critical bug, I
looked at a few recent critical regressions, namely those which
caused Release Canditates 6 and 7 to be abandoned.  None of these
could have been easily fixed by reversion, either because the fix
was complicated, the original source was too old for revert to be
safe, or the cause was external to LP.  So reversion offers no
easy answer.


@subheading Details

The policy is: David Kastrup has sole authority over what goes
into @code{stable/2.16} and which release(s) will have a version
number of 2.16.x, until 2012 Dec 31.

In more detail, this means:

@itemize
@item
he decides when to have 2.16.0.

@item
Classification of issues as being @qq{Critical} takes place as
normal, but he (and only he) may remove that label or even ignore
them completely and make a 2.16.x release despite Critical issues.

@item
when he wants have release, he will ask somebody to build a
release from the @code{stable/2.16} branch.

@item
he decides if, what, when to backport patches and have other
2.16.x releases.

@item
translators do not merge or cherry-pick onto @code{stable/2.16}
unless specifically requested to do so.

@item
nobody should merge or cherry-pick @emph{from} @code{stable/2.16},
either.

@item
If he decides to quit before 2012 Dec 31, then we will have a new
discussion about how to deal with the situation.

@end itemize


@subheading Further considerations

This could be considered to be an experiment.  It is time- and
version-limited.  In particular,

@itemize
@item
Development on git @code{master} continues as normal

@item
in 2012 December, we will discuss what to do about the 2.16 branch
in the future.

@item
this policy does not forbid us from introducing 2.18 or 3.0 before
2012 Dec if we choose to do so.

@item
this policy does not forbid us from developing other policies for
the 2.18 or 3.0 releases.

@item
additional discussion about regtests, GLISS, development roadmap,
etc, are postponed until later.

@end itemize


@node GOP2-3 - GLISS or not
@chapter GOP2-3 - GLISS or not

@subheading Summary

Let's decide whether to try to stabilize the syntax or not.  What
type of project do we want LilyPond to be?  What kinds of
guarantees (or at least firm intentions) do we want to give to
users with respect to lilypond 2 or 5 years from now being able to
read their current ly files?

@subheading Motivation

Some @qq{computer languages} are fairly stable.  A TeX or C++
program written 10 years ago will probably still compile with no
modifications (notwithstanding the g++ 4.3 header and namespace
changes).  The same is not true of LilyPond; even after using
@code{convert-ly}, there are still bits that require manual
updating.

Given that, LilyPond is not suitable as an archival format for
music.  It can produce a great pdf when you first write the file,
but the @code{.ly} files require regular maintenance if you want
them to compile in the latest stable version of lilypond.  This is
a problem for projects such as mutopia -- a large fraction of
their @code{.ly} files don't compile with current lilypond.  That
means that they can't benefit from recent bugfixes; users wanting
the sheet music in a different size (say, printing a choral score
as an A5 booklet) must delve into the ly code and make manual
changes.

On a personal note, this is one of the biggest reasons I've given
up on using lilypond personally.  From 2001 to 2004 I got a minor
in music composition.  I carefully kept all my @code{.ly} files
but foolishly did not preserve the pdfs.  And now, 10 years later,
I'm left with a bunch of music that I cannot generate sheet music
for.  Manually updating the @code{.ly} files would take hours or
days; I've started this process a few times but always lost
interest after a few files, since there's no guarantee that I
wouldn't need to go through the same process in another few years.


@subheading Stability or not?

Stabilizing a language is a tricky process.  If you do it too
early, then you're stuck with whatever mistakes or poor design
decisions.  If you do it too late, then there's a large body of
documents in the pre-stabilized version which will require
updating before they run in the stabilized version.

I see two options:

@enumerate

@item No stability: we go back to the way things worked a few
years ago.  When a programmer wants to change something, he
changes the code and maybe adds a convert-ly rule if it's
convenient to do so, otherwise just adds a warning to the NEWS.  I
stop telling people @qq{no, don't change the syntax, and don't
even talk about changing the syntax}.

@item Define a @strong{subset} of input as being stable for the
3.x branch.  We add regression tests for that subset of notation
and forbid running @code{convert-ly} on those files.  At the
moment, I imagine that the subset would consist of @emph{at most}
Notation sections 1.1 Pitches, 1.2 Rhythms, and the overall file
organization; nothing else.  Changes to input other than that
subset are fine.

@end enumerate

My personal preference is to stabilize a subset.  It won't solve
all the user problems with manually updating ly files, but it
would be a step in the right direction.  If the process goes well,
then we can have additional rounds of stabilization where we
expand the stable subset.


@subheading Example subset

In greater detail: I'm suggesting that we have a round of syntax
stabilization (GLISS).  At the end of it (3 months?  6 months?),
we add a few regression tests that might look something like this:

@example
\version "2.16.0"
\score @{
  \music @{
    \staff @{
      \voice @{
        a4 b c4. d8 |
        \tuplet 2/3 @{ fis4 a bes @} r2 |
      @}
    @}
  @}
@}
@end example

and then we guarantee that this file will compile, completely
unmodified (no @code{convert-ly} allowed), for every lilypond 3.x
version.  This seem like a really small step, but I really don't
think that we can overestimate how much time, energy, and
arguments this will require.

@subheading Example questions

Here's a few sample questions that we'd encounter even with a
really small subset.

PLEASE DO NOT DISCUSS THESE RIGHT NOW.

@itemize
@item
do we keep dutch as the default language, or switch to english?

@item
do we finally make that @code{\times} -> @code{\tuplet} change
that's been discussed for years?

@item
@code{\score \staff} vs. @code{\new score \new staff}.

@item
what's the canonical input structure?  what shorthands do we
commit to supporting?

@end itemize


@node GOP2-4 - Patch handling
@chapter GOP2-4 - Patch handling


@node GOP2-5 - Arguments and civility
@chapter GOP2-5 - Arguments and civility


@subheading Linux Weekly News on Mailing list civility

By coincidence, our anonymous developer survey coincided with a
pair of articles from Linux Weekly News on similar topics in the
GNU Linux kernel mailing lists: @qq{Making kernel developers less
grumpy} and @qq{On mocking}.

@example
@uref{http://lwn.net/Articles/500443/}
@uref{http://lwn.net/Articles/501670/}
@end example

The second article was a response to the user comments to the
first article, many of which focused on the last sentence:
@qq{Sometimes public mocking is part of the process and can
actually help instill that pride more widely}.

One of the take-aways for me was that the kernel developers were
quite aware of their reputation for being unpleasant, but they
still had more patches than they could really deal with (given the
limited number of reviewers), so they were content to drive away
some potential contributors.

That's a trade-off that I can respect, but I don't think that
LilyPond is in that position.  We have a problem keeping main
developers motivated+happy, so in this case we can't point to the
kernel hackers as an example to imitate.



@ignore
old "stable releases and roadmap"

@subheading Summary

Let's drop the @qq{any unintended change} thing, and go totally
with the regression tests.  Tests pass?  We can make a stable
release.  Also, let's have an official roadmap.


@subheading Motivation

There seems to be widespread frustration with the current system.
At the moment, any @qq{unintended change} blocks a release (plus a
few extra conditions), so we're at the mercy of all sorts of
behaviour that isn't covered by the regtests.  This makes it hard
to plan ahead for everybody: developers wanting to work on large
features or refactoring, users, linux distribution packagers, etc.

@subheading Details: Critical issues

A type-Critical issue will block a stable release, but the
definition is:

@itemize
@item
a reproducible failure to build either @code{make} or @code{make
doc}, from an empty build tree, in a first run, if
@code{configure} does not report any errors.

@item
anything which stops contributors from helping out (e.g.
lily-git.tcl not working, source tree(s) not being available,
LilyDev being unable to compile git master, inaccurate
instructions in the Contributor’s Guide 2 Quick start).

@quotation
To limit this scope of this point, we will assume that the
contributor is using the latest LilyDev and has read the relevant
part(s) of the Contributor’s Guide. Problems in other chapters of
the CG are not sufficient to qualify as Type-Critical. 
@end quotation

@item
any regression test which fails to compile or shows incorrect
output.

@end itemize

The only change is to the third point, namely the @qq{regression
test failure} as opposed to @qq{any unintentional change}.

@subheading Details: Regtests

The current regtests don't cover enough -- that's why we keep on
finding new regression-Critical issues.  I think it's worth
expanding the regtests and splitting them into multiple
categories.  This will likely take over 100 hours.

These names don't (deliberately) match any specific testing
methodology.  If they do, then it's probably a mistake and we
should rename these.

@itemize
@item
Crash: we don't care about the output of these; we just want to
make sure that lilypond doesn't crash with this input.

@item
Targeted: these files would test individual features, such as
printing accidentals or slurs, with a minimum of shared features.

@item
Integration: these are constructed examples which combine multiple
features together.

@item
Pieces: musically-interesting fragments of music, such as a few
systems from a Bach sonata or Debussy piano work.

@item
Syntax: short fragments of music for which the @code{.ly} files
are @qq{frozen} -- we @strong{never} run @code{convert-ly} on
these files until LilyPond 4.0.  (see below, @qq{roadmap})

@end itemize

I figure that we'll double the total number of regtests.  There's
probably some old ones that can be eliminated (or combined with
newer ones), but we'll be adding a lot more.

Before switching to this system, we will ensure that all regtests
give the desired output.  In cases where the output may look bad
because it is a stress test (e.g., @file{break.ly},
@file{spacing-strict-spacing-grace.ly}), this fact will be noted
in either the texidoc or as a markup inside the score.


@subheading Programming regtests

To avoid slowing down programming to a crawl, I figure that we'll
identify some subset of these regtests and have a separate
@command{make regtests-quick} command which only evaluates that
subset.

As a rule of thumb, I'd say that the @code{regtests-quick} target
should take as long as a @code{make} from scratch.  I'm
sympathetic to developers with limited computing resources, but I
think it's reasonable to ask everybody submitting programming
patches to @qq{double} the time it takes to test their patch
(since obviously everybody would run @code{make} before submitting
anything).

The patchy test-patches will still run the full regtest checks.

@subheading When breakage occurs

There will of course be functionality which breaks.  When that
happens, we file a normal bug.  A new regtest can only be added
for that bug when it is fixed -- we won't add the regtest first,
then try to fix it.

In other words, git master should always pass all regtests.  If it
doesn't, then reverting should be the first option.


@subheading Roadmap

With this change, we would no longer be committed to the same kind
of stability that we were before.  As such, I think it's worth
bumping the version up to 3.0.

The 3.x series will consist of a series of random breakage from
functionality not covered under the existing regtests and from
manual @code{.ly} changes required by GLISS.  This is intentional
-- or rather, we don't intend to break stuff, but the policy
accepts that this will happen.  Somebody may offer to maintain the
2.x series to cater to users who want additional stability.

Over the next 3 months or so, we'll discuss a number of syntax
changes in GLISS.  Then discussion will cease until all the
changes have been implemented.  We'll then have release 3.2, which
will almost certainly require manual changes to all .ly files.

We'll then have another few months of GLISS discussions, then a
pause for implementions, then 3.4.  Repeat as necessary.

LilyPond 4.0 will mark the ending of GLISS, and by that point we
should have much improved regtest coverage.  We can't really plan
too much for this, since it's likely two years away.

@end ignore


@bye

